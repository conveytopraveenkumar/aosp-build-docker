name: AOSP Repo Setup in EC2

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Launch EC2 Instance
        run: |
          UBUNTU_AMI_ID=$(aws ec2 describe-images --owners 099720109477 \
            --filters "Name=name,Values=ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*" \
            --query 'Images | sort_by(@, &CreationDate)[-1].ImageId' --output text)
          SUBNET_ID=$(aws ec2 describe-subnets --query 'Subnets[0].SubnetId' --output text)
          SG_ID=$(aws ec2 describe-security-groups --query 'SecurityGroups[0].GroupId' --output text)
          INSTANCE_ID=$(aws ec2 run-instances --image-id $UBUNTU_AMI_ID \
            --count 1 --instance-type t2.micro \
            --iam-instance-profile Name=EC2SSMInstanceProfile1 \
            --key-name new-key \
            --security-group-ids $SG_ID \
            --subnet-id $SUBNET_ID \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID
	  - name: Ensure EC2 Instance Is Fully Initialized
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)
 
            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"
 
            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

      - name: Get EC2 Public IP
        run: |
          PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $INSTANCE_ID \
            --query "Reservations[0].Instances[0].PublicIpAddress" --output text)
          echo "PUBLIC_IP=$PUBLIC_IP" >> $GITHUB_ENV

      - name: Create Helloworld.txt in EC2
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@$PUBLIC_IP "echo 'Hello, world!' > helloworld.txt"

      - name: Upload Helloworld.txt to S3
        run: |
          ssh -o StrictHostKeyChecking=no -i private-key.pem ubuntu@$PUBLIC_IP "aws s3 cp helloworld.txt s3://cicd-github-artifacts-bucket/"

      - name: Generate Pre-Signed URL for Download
        run: |
          PRESIGNED_URL=$(aws s3 presign s3://cicd-github-artifacts-bucket/helloworld.txt --expires-in 3600)
          echo "PRESIGNED_URL=$PRESIGNED_URL" >> $GITHUB_ENV

      - name: Print wget and curl Commands for Download
        run: |
          echo "Download File via wget: wget \"$PRESIGNED_URL\""
          echo "Download File via curl: curl -o helloworld.txt \"$PRESIGNED_URL\""

