name: AOSP Repo Setup in EC2 with Docker

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  setup_aosp:
    runs-on: ubuntu-latest
    steps:

      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1

      - name: Launch EC2 Instance
        run: |
          INSTANCE_ID=$(aws ec2 run-instances --image-id ami-09eb231ad55c3963d \
            --count 1 --instance-type t2.large \
            --iam-instance-profile Name=EC2SSMInstanceProfile1 \
            --key-name new-key \
            --security-group-ids sg-0226bb335bbecbf05 \
            --subnet-id subnet-089b826030629808d \
            --query "Instances[0].InstanceId" --output text)
          echo "INSTANCE_ID=$INSTANCE_ID" >> $GITHUB_ENV

      - name: Wait for EC2 Instance to Start
        run: aws ec2 wait instance-running --instance-ids $INSTANCE_ID

      - name: Ensure EC2 Instance Is Fully Initialized
        run: |
          while true; do
            INSTANCE_STATE=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceState.Name" --output text)
            SYSTEM_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].SystemStatus.Status" --output text)
            INSTANCE_STATUS=$(aws ec2 describe-instance-status --instance-ids $INSTANCE_ID --query "InstanceStatuses[0].InstanceStatus.Status" --output text)

            echo "Current State: $INSTANCE_STATE | System Status: $SYSTEM_STATUS | Instance Status: $INSTANCE_STATUS"

            if [[ "$INSTANCE_STATE" == "running" && "$SYSTEM_STATUS" == "ok" && "$INSTANCE_STATUS" == "ok" ]]; then
              echo "Instance is fully initialized!"
              break
            fi
            sleep 10
          done

      - name: Setup SSH Key for EC2 Access
        run: |
          echo "${{ secrets.AWS_SSH_PRIVATE_KEY }}" > private-key.pem
          chmod 600 private-key.pem

      - name: Install Docker and Fix Permissions in EC2
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << EOF
            sudo apt update && sudo apt install -y docker.io unzip git repo
            sudo usermod -aG docker ubuntu
            newgrp docker
            sudo systemctl restart docker
          EOF

      - name: Build and Run Docker Container for AOSP
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << EOF
            mkdir -p /home/ubuntu/aosp && cd /home/ubuntu/aosp

            echo "FROM ubuntu:20.04" > Dockerfile
            echo "RUN apt update && apt install -y git curl python3 python3-pip repo" >> Dockerfile
            echo "WORKDIR /workspace" >> Dockerfile
            echo "COPY entrypoint.sh /entrypoint.sh" >> Dockerfile
            echo "RUN chmod +x /entrypoint.sh" >> Dockerfile
            echo "ENTRYPOINT [\"/entrypoint.sh\"]" >> Dockerfile

            echo "#!/bin/bash" > entrypoint.sh
            echo "repo init -u https://android.googlesource.com/platform/manifest" >> entrypoint.sh
            echo "repo sync" >> entrypoint.sh
            echo "make -j\$(nproc)" >> entrypoint.sh
            chmod +x entrypoint.sh

            echo "Building Docker container..."
            docker build -t aosp-builder .

            echo "Running Docker container in detached mode..."
            docker run -d --name aosp-container -v /home/ubuntu/aosp:/workspace aosp-builder
          EOF

      - name: Check if Docker Container Started Correctly
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << EOF
            docker ps -a
            docker logs aosp-container
          EOF

      - name: Exec into Container and Run AOSP Commands
        run: |
          ssh -i private-key.pem -o StrictHostKeyChecking=no ubuntu@$(aws ec2 describe-instances --instance-ids $INSTANCE_ID --query "Reservations[0].Instances[0].PublicIpAddress" --output text) << EOF
            echo "Executing repo commands inside container..."
            docker exec aosp-container bash -c "repo init -u https://android.googlesource.com/platform/manifest && repo sync"
          EOF
